groups:
  - name: "postgres_exporter down alerts"
    rules:
      - alert: "postgres_exporter down P5"
        expr: up{host_priority="P5",instance=~".*:9187"} == 0
        for: 10m
        annotations:
          summary: "postgres_exporter down"
          description: 'Go to instance: "{{ $labels.instance }}" and check if service: "postgres_exporter" is running'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P3"

      - alert: "postgres_exporter down P4"
        expr: up{host_priority="P4",instance=~".*:9187"} == 0
        for: 5m
        annotations:
          summary: "postgres_exporter down"
          description: 'Go to instance: "{{ $labels.instance }}" and check if service: "postgres_exporter" is running'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P3"

      - alert: "postgres_exporter down P3"
        expr: up{host_priority="P3",instance=~".*:9187"} == 0
        for: 4m
        annotations:
          summary: "postgres_exporter down"
          description: 'Go to instance: "{{ $labels.instance }}" and check if service: "postgres_exporter" is running'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P2"

      - alert: "postgres_exporter down P2"
        expr: up{host_priority="P2",instance=~".*:9187"} == 0
        for: 3m
        annotations:
          summary: "postgres_exporter down"
          description: 'Go to instance: "{{ $labels.instance }}" and check if service: "postgres_exporter" is running'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P2"

      - alert: "postgres_exporter down P1"
        expr: up{host_priority="P1",instance=~".*:9187"} == 0
        for: 2m
        annotations:
          summary: "postgres_exporter down"
          description: 'Go to instance: "{{ $labels.instance }}" and check if service: "postgres_exporter" is running'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P1"

      - alert: "postgres_exporter down"
        expr: up{host_priority!~"P[1-5]",instance=~".*:9187"} == 0
        for: 4m
        annotations:
          summary: "postgres_exporter down"
          description: 'Go to instance: "{{ $labels.instance }}" and check if service: "postgres_exporter" is running'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P3"


  - name: "parse errors - postgres_exporter"
    rules:
      - alert: "postgres_exporter has new errors P1-3"
        expr: pg_up{host_priority=~"P[1-3]"} != 1
        for: 5m
        annotations:
          summary: "postgres_exporter has new errors"
          description: 'Go to instance: "{{ $labels.instance }}" and check log for postgres_exporter'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P2"

      - alert: "postgres_exporter has new errors P4-5"
        expr: pg_up{host_priority=~"P[4-5]"} != 1
        for: 15m
        annotations:
          summary: "postgres_exporter has new errors"
          description: 'Go to instance: "{{ $labels.instance }}" and check log for postgres_exporter'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P3"

      - alert: "postgres_exporter has new errors"
        expr: pg_up{host_priority!~"P[1-5]"} != 1
        for: 10m
        annotations:
          summary: "postgres_exporter has new errors"
          description: 'Go to instance: "{{ $labels.instance }}" and check log for postgres_exporter'
          grafana: "{{ GRAFANA_ALL_ALERTS_DASHBOARD }}"
          access: "{{ WIKI_MONITORING_ACCESS }}"
          priority: "P3"

# HELP pg_exporter_last_scrape_error Whether the last scrape of metrics from PostgreSQL resulted in an error (1 for error, 0 for success).
# HELP pg_locks_count Number of locks


# HELP pg_settings_max_connections Sets the maximum number of concurrent connections.
# HELP pg_settings_max_files_per_process Sets the maximum number of simultaneously open files for each server process.
# HELP pg_settings_max_function_args Shows the maximum number of function arguments.
# HELP pg_settings_max_identifier_length Shows the maximum identifier length.
# HELP pg_settings_max_index_keys Shows the maximum number of index keys.
# HELP pg_settings_max_locks_per_transaction Sets the maximum number of locks per transaction.
# HELP pg_settings_max_logical_replication_workers Maximum number of logical replication worker processes.
# HELP pg_settings_max_parallel_workers Sets the maximum number of parallel workers that can be active at one time.
# HELP pg_settings_max_parallel_workers_per_gather Sets the maximum number of parallel processes per executor node.
# HELP pg_settings_max_pred_locks_per_page Sets the maximum number of predicate-locked tuples per page.
# HELP pg_settings_max_pred_locks_per_relation Sets the maximum number of predicate-locked pages and tuples per relation.
# HELP pg_settings_max_pred_locks_per_transaction Sets the maximum number of predicate locks per transaction.
# HELP pg_settings_max_prepared_transactions Sets the maximum number of simultaneously prepared transactions.
# HELP pg_settings_max_replication_slots Sets the maximum number of simultaneously defined replication slots.
# HELP pg_settings_max_stack_depth_bytes Sets the maximum stack depth, in kilobytes. [Units converted to bytes.]
# HELP pg_settings_max_standby_archive_delay_seconds Sets the maximum delay before canceling queries when a hot standby server is processing archived WAL data. [Units converted to seconds.]
# HELP pg_settings_max_standby_streaming_delay_seconds Sets the maximum delay before canceling queries when a hot standby server is processing streame d WAL data. [Units converted to seconds.]
# HELP pg_settings_max_sync_workers_per_subscription Maximum number of table synchronization workers per subscription.
# HELP pg_settings_max_wal_senders Sets the maximum number of simultaneously running WAL sender processes.
# HELP pg_settings_max_wal_size_bytes Sets the WAL size that triggers a checkpoint. [Units converted to bytes.]
# HELP pg_settings_max_worker_processes Maximum number of concurrent worker processes.


# HELP pg_stat_activity_count number of connections in this state
# HELP pg_stat_activity_max_tx_duration max duration in seconds any active transaction has been running
# HELP pg_stat_bgwriter_buffers_alloc Number of buffers allocated
# HELP pg_stat_bgwriter_buffers_backend Number of buffers written directly by a backend
# HELP pg_stat_bgwriter_buffers_backend_fsync Number of times a backend had to execute its own fsync call (normally the background writer handles thos e even when the backend does its own write)
# HELP pg_stat_bgwriter_buffers_checkpoint Number of buffers written during checkpoints
# HELP pg_stat_bgwriter_buffers_clean Number of buffers written by the background writer
# HELP pg_stat_bgwriter_checkpoint_sync_time Total amount of time that has been spent in the portion of checkpoint processing where files are synchron ized to disk, in milliseconds
# HELP pg_stat_bgwriter_checkpoint_write_time Total amount of time that has been spent in the portion of checkpoint processing where files are written to disk, in milliseconds
# HELP pg_stat_bgwriter_checkpoints_req Number of requested checkpoints that have been performed
# HELP pg_stat_bgwriter_checkpoints_timed Number of scheduled checkpoints that have been performed
# HELP pg_stat_bgwriter_maxwritten_clean Number of times the background writer stopped a cleaning scan because it had written too many buffers
# HELP pg_stat_bgwriter_stats_reset Time at which these statistics were last reset
# HELP pg_stat_database_blk_read_time Time spent reading data file blocks by backends in this database, in milliseconds
# HELP pg_stat_database_blk_write_time Time spent writing data file blocks by backends in this database, in milliseconds
# HELP pg_stat_database_blks_hit Number of times disk blocks were found already in the buffer cache, so that a read was not necessary (this only inclu des hits in the PostgreSQL buffer cache, not the operating system's file system cache)
# HELP pg_stat_database_blks_read Number of disk blocks read in this database
# HELP pg_stat_database_conflicts Number of queries canceled due to conflicts with recovery in this database. (Conflicts occur only on standby servers ; see pg_stat_database_conflicts for details.)
# HELP pg_stat_database_conflicts_confl_bufferpin Number of queries in this database that have been canceled due to pinned buffers
# HELP pg_stat_database_conflicts_confl_deadlock Number of queries in this database that have been canceled due to deadlocks
# HELP pg_stat_database_conflicts_confl_lock Number of queries in this database that have been canceled due to lock timeouts
# HELP pg_stat_database_conflicts_confl_snapshot Number of queries in this database that have been canceled due to old snapshots
# HELP pg_stat_database_conflicts_confl_tablespace Number of queries in this database that have been canceled due to dropped tablespaces
# HELP pg_stat_database_deadlocks Number of deadlocks detected in this database
# HELP pg_stat_database_numbackends Number of backends currently connected to this database. This is the only column in this view that returns a value reflecting current state; all other columns return the accumulated values since the last reset.
# HELP pg_stat_database_stats_reset Time at which these statistics were last reset
# HELP pg_stat_database_temp_bytes Total amount of data written to temporary files by queries in this database. All temporary files are counted, regar dless of why the temporary file was created, and regardless of the log_temp_files setting.
# HELP pg_stat_database_temp_files Number of temporary files created by queries in this database. All temporary files are counted, regardless of why t he temporary file was created (e.g., sorting or hashing), and regardless of the log_temp_files setting.
# HELP pg_stat_database_tup_deleted Number of rows deleted by queries in this database
# HELP pg_stat_database_tup_fetched Number of rows fetched by queries in this database
# HELP pg_stat_database_tup_inserted Number of rows inserted by queries in this database
# HELP pg_stat_database_tup_returned Number of rows returned by queries in this database
# HELP pg_stat_database_tup_updated Number of rows updated by queries in this database
# HELP pg_stat_database_xact_commit Number of transactions in this database that have been committed
# HELP pg_stat_database_xact_rollback Number of transactions in this database that have been rolled back

